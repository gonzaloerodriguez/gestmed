name: Daily Database Backup

on:
  schedule:
    - cron: "0 2 * * *" # Todos los días a las 2:00 AM UTC
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Supabase CLI
        run: |
          # Usar npm para instalar el CLI de Supabase (método más confiable)
          npm install -g supabase
          supabase --version # Verificar instalación

      - name: Login to Supabase
        run: |
          echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase login --token

      - name: Probar conexión a Supabase
        run: |
          echo "Verificando conexión con Supabase..."
          supabase projects list

      - name: Create database backup
        run: |
          echo "Iniciando backup..."
          supabase db dump \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} \
            --db-url ${{ secrets.SUPABASE_DB_URL }} \
            --file backup_$(date +%Y%m%d_%H%M%S).sql
          echo "Backup completado. Comprimiendo archivo..."
          gzip backup_*.sql
          echo "Compresión lista."
          ls -la # Verificar archivo

      - name: Encrypt backup
        run: |
          echo "Encriptando backup..."
          gpg --symmetric --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 --s2k-digest-algo SHA512 --s2k-count 65536 --quiet --batch --passphrase "${{ secrets.BACKUP_ENCRYPTION_KEY }}" backup_*.sql.gz
          rm backup_*.sql.gz
          echo "Backup encriptado correctamente."
          ls -la # Verificar archivo

      - name: Upload backup to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: backup-$(date +%Y%m%d)
          name: Database Backup $(date +%Y-%m-%d)
          files: backup_*.sql.gz.gpg
          body: |
            Backup automático de base de datos
            Fecha: $(date)
            Tablas incluidas: doctors, patients, medical_histories, consultations, prescriptions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        run: |
          # Instalar GitHub CLI para limpiar backups antiguos
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Cleanup old backups
        run: |
          echo "Limpiando backups antiguos..."
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          gh release list --limit 50 | grep "backup-" | tail -n +31 | awk '{print $1}' | xargs -I {} gh release delete {} --yes || true

# # .github/workflows/backup-database.yml
# name: Daily Database Backup

# on:
#   schedule:
#     # Ejecutar diariamente a las 2:00 AM UTC
#     - cron: "0 2 * * *"
#   workflow_dispatch: # Permitir ejecución manual

# jobs:
#   backup:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "18"

#       - name: Install Supabase CLI
#         run: |
#           npm install -g supabase

#       - name: Login to Supabase
#         run: |
#           echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase login --token

#       - name: Create database backup
#         run: |
#           # Crear backup completo
#           supabase db dump --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --db-url ${{ secrets.SUPABASE_DB_URL }} > backup_$(date +%Y%m%d_%H%M%S).sql

#           # Comprimir backup
#           gzip backup_*.sql

#       - name: Encrypt backup
#         run: |
#           # Encriptar el backup
#           gpg --symmetric --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 --s2k-digest-algo SHA512 --s2k-count 65536 --quiet --batch --passphrase "${{ secrets.BACKUP_ENCRYPTION_KEY }}" backup_*.sql.gz
#           rm backup_*.sql.gz # Eliminar archivo sin encriptar

#       - name: Upload backup to release
#         uses: softprops/action-gh-release@v1
#         with:
#              tag_name: backup-${{ github.run_id }}
#              name: Database Backup ${{ github.run_id }}
#           files: backup_*.sql.gz.gpg
#           body: |
#             Backup automático de base de datos
#             Fecha: $(date)
#             Tablas incluidas: doctors, patients, medical_histories, consultations, prescriptions
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Cleanup old backups
#         run: |
#           # Mantener solo los últimos 30 backups
#           gh release list --limit 50 | grep "backup-" | tail -n +31 | awk '{print $1}' | xargs -I {} gh release delete {} --yes
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
